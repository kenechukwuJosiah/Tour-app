#Apis and Restful Api Design
Rest Api is an api architecture which is the most used.
Api stand for Application Programming Interface. Which is a piece of software that can be used by another piece of software in order to allow applicaitons to talk to each other like exchanging datas. 

REST stand for representational State Transfer. Which is a way of building api in lgical way making them easy to consume for ourselves or others to consume. Rest api are apis following the rest architecture.

Steps for building restful Apis
-Separate API into logical resources
-Expose structured resource-based urls
-Use HTTP methods in exposing them not urls
-send data as JSON
-it must be stateless.

#Separating api into logical resources
The resources here is an object or representation of something, which has data associated to it i.e any information that can be named can be a resource.

#Exposing structured resource-based urls which is url e.g https://www.natours.com/addNewTour the addNewTour is an endpoint The end points performs differnt action when a request hits them.

Note: put and patch http method are similar but the put is used to update a whole resource while that of patch is used to update only the part of the resource that is changed.

The four http method that should be responded to while building a restful api are post, get, put, patch, delete.

JSON: is light weight data interchange format which heavly used by web api or sending data btw server and the clients.

#Statless Restful api: All state is handled on the client. A state is simply a piece of data that will change over time. So if all state will be handled in the client each request should contain everything needed to proccess the page

Note: the url parameter can be accessed from req.params. The parameter is a varrible that takes the value entered in the url. req.params is an object that hold all the params.

//////////////////////////////////////////////
//MidleWare, MidleWare and reqponse request cycle
They are function that are being executed btw the req and res cycle. the req and res object pass through this middleware i.e you can access the middleware in any req handle. 
There can be more than one middleware in our middleware stack. use the use() method to create a middleware in your app. After each middleware is adviceable to use the next() method in other for the proccess to continue violation of this convention will leave the proccess stuck and that will be a very bad user experience for the user. if the MidleWare comes after the request handler the middleware won't work on that request cycle because by sending back data with the .json() method or .send() method the request resoponse method. 

#Param middleware: this is a special type of middleware function that only run for certain parameter i.e url parameter. the middleware function takes four parameters which are the req object, res object, next() method and the param value

Note: 400 status code stands for bad request or invalid request.

////////////////////////////////////
//Varriable Environment



////////////////////////////////////
//Mongo db
To create a local db using mongo db enter mongo in your command line to open mongo shell then enter use plus the name of the database to create a database. This use command will switch you to already existing db if the name you entered matches it. Inside a db we have collections and each collections has documents i.e (the data we create) in it.

e.g db.tours.insertOne(Dataobject);
The db is the current database, tours is the collection and the insertOne is for inserting only one data while insertMany is for more than one data.

some basic commands in mongodb shells are
-use for switching and creating databases
-show dbs
-shwo collections
-show users
-show profile
-show logs etc

Creating new documents in mongodb
we crate documents in mongodb using the inster command like the insertOne for inserting only one document and the insertMany for inserting more than one documents using an array.

Querying the DataBase
To find a document in the db use the find() method on the collection then pass a keyvalue filter that matches the data you want to filter. if we want to filter documetns using a number value we can us mongodb special varrible $lte which stands for less than or equal to e.g. db.find({price: {$lte: 500}}); this will now return all the documents have their price less than 500. To find the one greater than or equal to use the $gte e.g db.collection.find({rating: {$gte: number}}); this returns all documents having the rating price thats equl or greater than the number entered. This method of checking two conditions is like the and operator in javascript. we can check for one condition to one condition only using the $or operator e.g. db.collection.find({$or: [{price: {$lt: number}}, {rating: {$gte: number}}]});

Updating documents
Just like create documents we have the updateOne() which updates only one document and the updateMany() which updates more than one documents. 
e.g. updateOne:- db.collection.updateOne({filter}, {$set: {what to update in keyvalue pair}});

e.g. updateMany:- db.collection.updateMany({filter})

Note: you can aswell replace a document in your collection using the replaceOne and replaceMany using the same procedure an in updating.

Deleting document
Just like every other crud operator you can deleteOne or deleteMany documetns. e.g. db.collection.deleteOne(filter); db.collection.deleteMany(filter); to your whole collection use deleteMany({});

////////////////////////////////////////
//Mongoose
Mongoose is an object data modeling (ODM) libary for Mongodb and nodejs. Mongoose is like express in Nodejs i.e its the higher level of abstraction of interacting with mongodb. Mongoose allows for rapid and simple development of mongoDB database interaction i.e it connects our ide to the database. With mongoose we can use schema to model data and relationships, easy data validation, provides simple query API, middleware etc.

Mongoose schema:- This is a feature provided by mongoose to model our data by describing the structure of the data, setting defualt values, and validations.

Mongoose model:- Its like a wrapper for schema, providing an Interface to the database for CRUD operations.

mongoose is all about model and a model like a blueprint for create a docuemnt in our mongodb database.

////////////////////////////////////////////////
//BACKEND ARCHITECTURE 
#MVC: Modle view controller
The contains three layers which are the model layer, the controller layer, and the view lay.

The model layer takes care of the business logic.

The work of controller layer to handle application logic which is handling request, interact with model and send back responses to the client.

The view layer takes care of the graphical interface i.e when dealing with server side rendered website. This is where the website template is being stored like .pug file.

Applicaiton logic vs Business logic
Application: These are code that is only concerned about the application's implementations like managing request and responses. It serves a bride btw model and view layer so they don't overlap.

Business logic: They are code that actully deals or solves business problem we set out to solve or any code related to that e.g created a new resources in our database like users etc, checking if user password is correct, validating user input data, ensuring only users who bought a resource can review it. 

//////////////////////////////////////////////////
//Mongodb Aggregation pipeline
This is mongodb framework for data aggregation i.e defining a pipeline where all the documents from a certain collection go through to be proccessed step by step in order to get aggregated result.
